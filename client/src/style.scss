// `$themes` nested map contains `light` & `dark` map 
$themes: (
  light: (
    textColor: #000,
    textColorSoft: #555,
    bg: white,
    bgSoft: #f6f3f3,
    logo: darkblue,
    border: lightgrey,
  ),
  dark: (
    textColor: whitesmoke,
    textColorSoft: lightgrey,
    bg: #222,
    bgSoft: #333,
    logo: white,
    border: #444,
  ),
);

// Generate theme-specific styles using a single class & set of variable maps
// `@mixin` is a reusable block of code that can be included in other stylesheets
@mixin themify($themes) {
  @each $theme, $map in $themes { // E.g. `$theme`: `light` ; `$map`: light(...)
    // `&` is used to concatenate the `.theme-#{$theme}` selector with a new 
    // selector e.g. `.theme-light .some-selector`
    .theme-#{$theme} & {
      $theme-map: () !global; // Initializes an empty global variable `$theme-map`

      @each $key, $submap in $map {
        $value: map-get( 
          map-get($themes, $theme), /* E.g. `light` */
          "#{$key}" /* E.g. `textColor` */
        ); // E.g. `$value: map-get(light, textColor) = `$value: #000`

        $theme-map: map-merge( 
          $theme-map, 
          ($key: $value)  /* E.g. `textColor`: `#000` */
        ) !global;  // E.g. `$theme-map: (textColor: #000, ...)` 
      }

      // `@content` directive is used to include any CSS that is passed to the 
      // `themify` mixin
      @content;

      // Reset `$theme-map` to null so it doesn't interfere with other styles 
      // outside of the mixin
      $theme-map: null !global;
    }
  }
};

@function themed($key) {
  @return map-get($theme-map, $key);
};

@mixin mobile {
  @media (max-width: 480px) { // Width [0-480]px
    @content;
  }
}

@mixin tablet {
  @media (max-width: 960px) { // Width [0-960]px
    @content;
  }
}